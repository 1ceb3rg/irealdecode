"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeIrealPlaylist = exports.decodeIreal = exports.detectPlaylist = exports.encodeIreal = exports.transposeIrealString = void 0;
const fixedEncodeURIComponent = (string) => {
    return encodeURIComponent(string).replace(/[!'()*]/g, (c) => {
        return "%" + c.charCodeAt(0).toString(16);
    });
};
const DecodedSongUrlRegex = /^ireal(b|book):\/\/[^=]+=[^=]+==[^=]+=[A-Z](b|\#)?-?=\d?\d?=1r34LbKcu7[^=]*=[^=]*=\d\d?\d?=\d\d?\d?/;
// Keys with their transposition number for IReal
const MajorKeys = {
    C: 0,
    Db: 1,
    D: 2,
    Eb: 3,
    E: 4,
    F: 5,
    Gb: 6,
    G: 7,
    Ab: 8,
    A: 9,
    Bb: 10,
    B: 11,
};
Object.freeze(MajorKeys);
const MinorKeys = {
    "A-": 0,
    "Bb-": 1,
    "B-": 2,
    "C-": 3,
    "C#-": 4,
    "D-": 5,
    "Eb-": 6,
    "E-": 7,
    "F-": 8,
    "F#-": 9,
    "G-": 10,
    "G#-": 11,
};
Object.freeze(MinorKeys);
const Keys = Object.assign(Object.assign({}, MajorKeys), MinorKeys);
Object.freeze(Keys);
// Transpose an encoded iRealString. Only works with the irealb:// links (new format)
function transposeIrealString(irealLink, transpose) {
    if (!DecodedSongUrlRegex.test(decodeURIComponent(irealLink)))
        return undefined;
    return (/irealbook/.test(irealLink)
        ? encodeIreal(decodeIreal(irealLink))
        : irealLink).replace(/(?<=irealb\w*:\/\/[^=]*=[^=]*==[^=]*=[^=]*=)([^=]*)?(?=[^=]*=[^=]*=[^=]*=[^=]*=[^=]*)/, Keys[transpose].toString());
}
exports.transposeIrealString = transposeIrealString;
//encode an ireal URL from an IReal object
function encodeIreal(ireal) {
    var _a, _b, _c;
    if (ireal === null || ireal === void 0 ? void 0 : ireal.oldForm)
        return `irealbook://${ireal.title}=${ireal.artist}=${ireal.style}=${ireal.key}=n=${ireal.changes}`;
    return `irealb://${fixedEncodeURIComponent(ireal.title)}=${fixedEncodeURIComponent(ireal.artist)}==${fixedEncodeURIComponent(ireal.style)}=${fixedEncodeURIComponent(ireal.key)}=${ireal.transpose}=${encodeURIComponent("1r34LbKcu7" + ireal.changes)}=${encodeURIComponent((_a = ireal === null || ireal === void 0 ? void 0 : ireal.playbackStyle) !== null && _a !== void 0 ? _a : "")}=${+((_b = ireal === null || ireal === void 0 ? void 0 : ireal.tempo) !== null && _b !== void 0 ? _b : 0)}=${+((_c = ireal === null || ireal === void 0 ? void 0 : ireal.playbackNumTimes) !== null && _c !== void 0 ? _c : 3)}
`;
}
exports.encodeIreal = encodeIreal;
// convert a song string into and IReal object
function makeIreal(irealString, isOldForm) {
    const data = irealString.split("=");
    return isOldForm
        ? {
            title: data[0].trim(),
            artist: data[1].trim(),
            style: data[3].trim(),
            key: data[4].trim(),
            changes: data[5],
            oldForm: true
        }
        : {
            title: data[0].trim(),
            artist: data[1].trim(),
            style: data[3].trim(),
            key: data[4].trim(),
            transpose: data[5],
            changes: data[6].split("1r34LbKcu7")[1],
            playbackStyle: data[7].trim() || "",
            tempo: data[8] || "0",
            playbackNumTimes: data[9] || "3",
        };
}
// Detect if an item is a playlist allow for maximum playlists length of 1400 songs
function detectPlaylist(link) {
    const playlist = /(?<=^ireal(b|book):\/\/([^=]+=[^=]+==[^=]+=[A-Z](b|\#)?-?=\d?\d?=1r34LbKcu7[^=]*=[^=]*=\d\d?\d?=\d\d?\d?===){1,1400})[^=]*$/.exec(decodeURIComponent(link));
    return playlist ? playlist[0] : undefined;
}
exports.detectPlaylist = detectPlaylist;
// return an IReal object if the link is a single song, or undefined if it's not
function decodeIreal(link) {
    const isOldForm = /^irealbook/.test(link);
    const decoded = decodeURIComponent(link);
    if (!DecodedSongUrlRegex.test(decoded) && !isOldForm)
        return undefined;
    return makeIreal(decoded.replace(/^irealb\w*:\/\//, ""), isOldForm);
}
exports.decodeIreal = decodeIreal;
function decodeIrealPlaylist(link) {
    return new Promise((resolve, reject) => {
        var _a;
        //check for the old format
        const isOldForm = /^irealbook/.test(link);
        const playlist = detectPlaylist(link);
        // decode the URL format and remove the link prefix
        const decoded = decodeURIComponent(link.replace(/^irealb\w*:\/\//, ""));
        // check if it's a playlist
        if (playlist) {
            const data = /(.*)===([^=]*)$/.exec(decoded);
            if (data) {
                const result = {
                    title: playlist,
                    songs: (_a = data[1]
                        .split("===")) === null || _a === void 0 ? void 0 : _a.map((song) => makeIreal(song, isOldForm)),
                };
                result.songs.every(song => song !== undefined) ? resolve(result) : reject('Cannot parse playlist');
            }
            else
                reject("Cannot parse playlist");
        }
        else
            reject("Is not a playlist");
    });
}
exports.decodeIrealPlaylist = decodeIrealPlaylist;
//# sourceMappingURL=data:application/json;base64,