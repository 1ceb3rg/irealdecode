"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeIreal = exports.encodeIreal = void 0;
const fixedEncodeURIComponent = (string) => {
    return encodeURIComponent(string).replace(/[!'()*]/g, (c) => {
        return '%' + c.charCodeAt(0).toString(16);
    });
};
function encodeIreal(ireal) {
    return `irealb://${fixedEncodeURIComponent(ireal.name)}=${fixedEncodeURIComponent(ireal.artist)}==${fixedEncodeURIComponent(ireal.style)}=${fixedEncodeURIComponent(ireal.key)}==${fixedEncodeURIComponent(ireal.changes)}=${encodeURIComponent(ireal.playbackStyle)}=${+ireal.tempo}=${+ireal.playbackNumTimes}
`;
}
exports.encodeIreal = encodeIreal;
function decodeIreal(link) {
    // decode the URL ASCII format and remove the link prefix
    const decoded = decodeURIComponent(link.replace(/irealb\w*:\/\//, ""));
    // check if it's a playlist and get the playlist's name
    const playlist = decoded.includes("===")
        ? decoded.substr(decoded.lastIndexOf("===") + 3)
        : undefined;
    //separate the songs and data
    const data = decoded.split("===").map((song) => {
        let data = song.split("=");
        let x = data.filter((value) => value != "");
        return Object.assign(Object.assign({ name: x[0], ireallink: "irealb://" + fixedEncodeURIComponent(song), artist: x[1], style: x[2], key: x[3], changes: x[4], playbackStyle: x[5], tempo: x[6] }, (playlist ? { playlist: playlist } : {})), { playbackNumTimes: x[7] });
    });
    return playlist ? data.slice(0, -1) : data;
}
exports.decodeIreal = decodeIreal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQXFCQSxNQUFNLHVCQUF1QixHQUFHLENBQUMsTUFBYSxFQUFVLEVBQUU7SUFDeEQsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDeEQsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUE7QUFDRCxTQUFnQixXQUFXLENBQUMsS0FBVztJQUV2QyxPQUFPLFlBQVksdUJBQXVCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksdUJBQXVCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQjtDQUM5UyxDQUNBO0FBQ0QsQ0FBQztBQUxELGtDQUtDO0FBR0QsU0FBZ0IsV0FBVyxDQUFDLElBQVc7SUFDckMseURBQXlEO0lBQ3pELE1BQU0sT0FBTyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RSx1REFBdUQ7SUFDdkQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDdEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNkLDZCQUE2QjtJQUM3QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzdDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTVDLE9BQU8sOEJBQ0wsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixTQUFTLEVBQUMsV0FBVyxHQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxFQUNuRCxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNaLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1gsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixPQUFPLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNaLGFBQWEsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ25CLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQ1AsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FDM0MsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUNiLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDN0MsQ0FBQztBQTFCRCxrQ0EwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuIHR5cGUgTm90ZSA9IFwiQVwiIHwgXCJCXCIgfCBcIkNcIiB8IFwiRFwiIHwgXCJFXCIgfCBcIkZcIiB8IFwiR1wiO1xuIHR5cGUgU2lnbj0gXCJcInxcImJcInxcIiNcIlxuIHR5cGUgVG9uYWxpdHk9IFwiXCJ8XCItXCJcbiB0eXBlIEtleT0gYCR7Tm90ZX0ke1NpZ259JHtUb25hbGl0eX1gXG5cbmludGVyZmFjZSBJUmVhbCB7XG4gIGlyZWFsbGluazogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGFydGlzdDogc3RyaW5nO1xuICBzdHlsZTogc3RyaW5nO1xuICBrZXk6IEtleTtcbiAgdGVtcG86IHN0cmluZztcbiAgcGxheWxpc3Q/OiBzdHJpbmc7XG4gIHBsYXliYWNrU3R5bGU6c3RyaW5nO1xuICBwbGF5YmFja051bVRpbWVzOnN0cmluZztcbiAgY2hhbmdlczpzdHJpbmc7XG5cbn1cblxuY29uc3QgZml4ZWRFbmNvZGVVUklDb21wb25lbnQgPSAoc3RyaW5nOnN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKS5yZXBsYWNlKC9bIScoKSpdL2csIChjKSA9PiB7XG4gICAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlSXJlYWwoaXJlYWw6SVJlYWwgKXtcblxucmV0dXJuIGBpcmVhbGI6Ly8ke2ZpeGVkRW5jb2RlVVJJQ29tcG9uZW50KGlyZWFsLm5hbWUpfT0ke2ZpeGVkRW5jb2RlVVJJQ29tcG9uZW50KGlyZWFsLmFydGlzdCl9PT0ke2ZpeGVkRW5jb2RlVVJJQ29tcG9uZW50KGlyZWFsLnN0eWxlKX09JHtmaXhlZEVuY29kZVVSSUNvbXBvbmVudChpcmVhbC5rZXkpfT09JHtmaXhlZEVuY29kZVVSSUNvbXBvbmVudChpcmVhbC5jaGFuZ2VzKX09JHtlbmNvZGVVUklDb21wb25lbnQoaXJlYWwucGxheWJhY2tTdHlsZSl9PSR7K2lyZWFsLnRlbXBvfT0keytpcmVhbC5wbGF5YmFja051bVRpbWVzfVxuYFxuO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVJcmVhbChsaW5rOnN0cmluZykge1xuICAvLyBkZWNvZGUgdGhlIFVSTCBBU0NJSSBmb3JtYXQgYW5kIHJlbW92ZSB0aGUgbGluayBwcmVmaXhcbiAgY29uc3QgZGVjb2RlZCA9IGRlY29kZVVSSUNvbXBvbmVudChsaW5rLnJlcGxhY2UoL2lyZWFsYlxcdyo6XFwvXFwvLywgXCJcIikpO1xuICAvLyBjaGVjayBpZiBpdCdzIGEgcGxheWxpc3QgYW5kIGdldCB0aGUgcGxheWxpc3QncyBuYW1lXG4gIGNvbnN0IHBsYXlsaXN0ID0gZGVjb2RlZC5pbmNsdWRlcyhcIj09PVwiKVxuICAgID8gZGVjb2RlZC5zdWJzdHIoZGVjb2RlZC5sYXN0SW5kZXhPZihcIj09PVwiKSArIDMpXG4gICAgOiB1bmRlZmluZWQ7XG4gIC8vc2VwYXJhdGUgdGhlIHNvbmdzIGFuZCBkYXRhXG4gIGNvbnN0IGRhdGEgPSBkZWNvZGVkLnNwbGl0KFwiPT09XCIpLm1hcCgoc29uZykgPT4ge1xuICAgIGxldCBkYXRhID0gc29uZy5zcGxpdChcIj1cIik7XG4gICAgbGV0IHggPSBkYXRhLmZpbHRlcigodmFsdWUpID0+IHZhbHVlICE9IFwiXCIpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB4WzBdLFxuICAgICAgaXJlYWxsaW5rOlwiaXJlYWxiOi8vXCIrZml4ZWRFbmNvZGVVUklDb21wb25lbnQoc29uZyksXG4gICAgICBhcnRpc3Q6IHhbMV0sXG4gICAgICBzdHlsZTogeFsyXSxcbiAgICAgIGtleTp4WzNdLFxuICAgICAgY2hhbmdlczp4WzRdLFxuICAgICAgcGxheWJhY2tTdHlsZTp4WzVdLFxuICAgICB0ZW1wbzogeFs2XSxcbiAgICAgIC4uLihwbGF5bGlzdCA/IHsgcGxheWxpc3Q6IHBsYXlsaXN0IH0gOiB7fSksXG4gICAgICBwbGF5YmFja051bVRpbWVzOnhbN11cbiAgICB9IGFzIElSZWFsO1xuICB9KTtcbiAgcmV0dXJuIHBsYXlsaXN0ID8gZGF0YS5zbGljZSgwLCAtMSkgOiBkYXRhO1xufVxuXG4iXX0=